{"version":3,"file":"static/js/Cast.6750629e.chunk.js","mappings":"+OAEaA,E,MAAaC,GAAAA,GAAH,uyB,SCoCvB,EAjCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAiBN,GAASO,MAAK,SAACC,GAAD,OAC7BJ,GAAQ,OAAII,EAASC,KAAKN,YAE3B,CAACH,KAGF,8BACGG,IACC,SAACL,EAAD,UACGK,EAAKO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAArB,OACR,gBAAIC,UAAU,OAAd,WACE,gBAAKA,UAAU,QACbC,IACEH,EAAY,yCAC0BA,GAD1B,2CAIdI,IAAKH,KAEP,cAAGC,UAAU,WAAb,SAAyBD,MATDF,Y,8EChBvB,SAASM,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE","sources":["components/cast/CastStyled.js","components/cast/Cast.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastStyled = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0;\n  padding: 0;\n\n  border-top: 2px solid aqua;\n\n  .item {\n    flex-basis: calc(100% / 2 - 20px);\n    margin-left: 20px;\n    margin-top: 20px;\n\n    opacity: 1;\n\n    transition: opacity $transition-duration $transition-timing;\n\n    &:hover,\n    &:focus {\n      opacity: 0.8;\n\n      transition: all $transition-duration $transition-timing;\n    }\n\n    @media screen and (min-width: 768px) and (max-width: 1169px) {\n      flex-basis: calc(100% / 3 - 20px);\n    }\n\n    @media screen and (min-width: 1170px) {\n      flex-basis: calc(100% / 4 - 20px);\n    }\n  }\n\n  .image {\n    width: 300px;\n  }\n\n  .nameText {\n    font-size: 16px;\n    font-weight: 600;\n    font-style: italic;\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCastById } from \"../../services/api\";\nimport { CastStyled } from \"./CastStyled\";\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    getMovieCastById(movieId).then((response) =>\n      setCast([...response.data.cast])\n    );\n  }, [movieId]);\n    \n  return (\n    <>\n      {cast && (\n        <CastStyled>\n          {cast.map(({ id, profile_path, name }) => (\n            <li className='item' key={id}>\n              <img className='image'\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : `https://img.icons8.com/ios/452/image.png`\n                }\n                alt={name}\n              />\n              <p className='nameText'>{name}</p>\n            </li>\n          ))}\n        </CastStyled>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["CastStyled","styled","movieId","useParams","useState","cast","setCast","useEffect","getMovieCastById","then","response","data","map","id","profile_path","name","className","src","alt","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}